"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitorHasOptedIn = exports.WebsiteData = exports.JSONCookieCodec = void 0;
class JSONCookieCodec {
    constructor(wrap) {
        this.underlying = wrap;
    }
    get(name) {
        const rawCookie = this.underlying.get(name);
        if (!rawCookie) {
            return null;
        }
        return JSON.parse(rawCookie);
    }
    set(name, value) {
        this.underlying.set(name, JSON.stringify(value), 90);
    }
}
exports.JSONCookieCodec = JSONCookieCodec;
const JSON_COOKIE_NAME = "sg_cookies";
const JSON_COOKIE_VERSION_KEY = "_g";
const JSON_COOKIE_VISITOR_ID_KEY = "visid";
const JSON_COOKIE_PREVIEW_PROJECT_KEY = "pmr";
const JSON_COOKIE_PREVIEW_VARIATION_KEY = "pmv";
const SUPPORTED_JSON_COOKIE_VERSION = 1;
/**
 * WebsiteData is a cookie persistence layer compatible with the frontend js-sdk.
 * It helps us keep the visitor ID stable, and remember variation allocations when
 * project configs change.
 */
class WebsiteData {
    constructor(websiteID, cookies) {
        const codec = new JSONCookieCodec({ get: cookies.get, set: () => undefined });
        const existing = codec.get(JSON_COOKIE_NAME);
        const jsonCookie = existing || { [JSON_COOKIE_VERSION_KEY]: SUPPORTED_JSON_COOKIE_VERSION };
        if (!jsonCookie[websiteID]) {
            jsonCookie[websiteID] = {};
        }
        this.websiteID = websiteID;
        this.jsonCookie = jsonCookie;
    }
    save(cookies) {
        const codec = new JSONCookieCodec({ get: () => "", set: cookies.set });
        codec.set(JSON_COOKIE_NAME, this.jsonCookie);
    }
    isCompatible() {
        return this.jsonCookie[JSON_COOKIE_VERSION_KEY] === SUPPORTED_JSON_COOKIE_VERSION;
    }
    getVisitorID() {
        const val = this.get(JSON_COOKIE_VISITOR_ID_KEY);
        return typeof val == "string" ? val : null;
    }
    setVisitorID(visitorID) {
        this.set(JSON_COOKIE_VISITOR_ID_KEY, visitorID);
    }
    rememberAllocation(project, variation) {
        const prevAudP = this.get("aud_p");
        this.set("aud_p", (Array.isArray(prevAudP) ? prevAudP : []).concat(project.id));
        this.set(project.id + "_ch", 1);
        this.set(project.id + "", [variation.id]);
    }
    rememberNullAllocation(project) {
        this.set(project.id + "_ch", -1);
    }
    /**
     * Get current allocation info from the website data.
     *
     * @param project check existing allocation for this project
     * @returns the allocated variation if it exists, null if a null allocation exists, undefined if there is no info
     */
    getAllocation(project) {
        if (this.get(project.id + "_ch") == -1) {
            return null;
        }
        const allocatedVariations = this.get(project.id + "");
        if (!Array.isArray(allocatedVariations)) {
            return undefined;
        }
        for (const variation of project.variations) {
            if (variation.id == allocatedVariations[0]) {
                return variation;
            }
        }
        return undefined;
    }
    /**
     * Get current preview config from the website data.
     *
     * @returns the current preview config if it exists, null otherwise
     */
    getPreviewData() {
        const projectID = this.get(JSON_COOKIE_PREVIEW_PROJECT_KEY);
        const variationID = this.get(JSON_COOKIE_PREVIEW_VARIATION_KEY);
        if (typeof projectID !== "number") {
            return null;
        }
        if (typeof variationID !== "number") {
            return null;
        }
        return { projectID, variationID };
    }
    get(key) {
        if (!this.isCompatible()) {
            return null;
        }
        return this.jsonCookie[this.websiteID][key];
    }
    set(key, value) {
        if (!this.isCompatible()) {
            return;
        }
        this.jsonCookie[this.websiteID][key] = value;
    }
}
exports.WebsiteData = WebsiteData;
const OPTIN_COOKIE_NAME = "sg_optin";
function visitorHasOptedIn(cookies) {
    return cookies.get(OPTIN_COOKIE_NAME) === "1";
}
exports.visitorHasOptedIn = visitorHasOptedIn;
//# sourceMappingURL=cookies.js.map