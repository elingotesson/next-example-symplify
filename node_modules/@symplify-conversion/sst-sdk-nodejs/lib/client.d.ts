import { CookieJar } from "./cookies";
import { Logger } from "./logger";
import { AudienceAttributes, SymplifyConfig } from "./project";
export declare type IDGenerator = () => string;
export declare type ClientDependencies = {
    httpGET?: (url: string) => Promise<string>;
    log?: Logger;
    idGenerator?: IDGenerator;
    cdnBaseURL?: string;
};
export declare class SymplifySDK {
    websiteID: string;
    httpGET: (url: string) => Promise<string>;
    log: Logger;
    idGenerator: IDGenerator;
    running: boolean;
    ready: Promise<void>;
    cdnBaseURL: string;
    config: {
        latest: SymplifyConfig | null;
        loading: boolean;
    };
    /**
     * Create an SDK instance. Each instance maintains its configuration in sync with our backend.
     *
     * @param websiteID your website ID
     * @param deps (optional) override default dependencies
     * @param configUpdateInterval (optional) seconds between configuration update checks, MUST be at least 1
     */
    constructor(websiteID: string, deps?: ClientDependencies, configUpdateInterval?: number);
    /**
     * Stop the config polling loop.
     */
    stop(): void;
    /**
     * Returns the name of the allocated variation in the project called
     * `projectName` for the current visitor. The current visitor is identified
     * by our cookie, if they are unknown, a new ID is created and set in the
     * cookie.
     *
     * @param projectName the name of the project to allocate in
     * @param cookies a delegate for reading and writing request cookies
     * @param audienceAttributes custom attributes for audience evaluation
     * @returns the name of the allocated variation, or null if none was
     * allocated
     */
    findVariation(projectName: string, cookies: CookieJar, audienceAttributes?: AudienceAttributes): string | null;
    configURL(): string;
    loadConfig(): Promise<void>;
    fetchConfig(): Promise<SymplifyConfig>;
}
