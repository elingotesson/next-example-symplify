import { Audience } from "./audience";
import { Logger } from "./logger";
import { List } from "./rules-engine";
export declare type ProjectState = "paused" | "active";
export declare type AudienceAttributes = Record<string, boolean | number | string>;
export declare enum PrivacyMode {
    DEFAULT = 0,
    OPTIN_TRACKING = 1,
    OPTIN_EVERYTHING = 2
}
export declare type SymplifyConfig = {
    /** in seconds from epoch */
    updated: number;
    privacy_mode: PrivacyMode;
    projects: ProjectConfig[];
};
export declare type ProjectConfig = {
    id: number;
    name: string;
    variations: VariationConfig[];
    state: ProjectState;
    audience_rules?: List;
    audience?: Audience;
};
export declare type VariationConfig = {
    id: number;
    name: string;
    weight: number;
    state: ProjectState;
};
/**
 * Look up the variation with the given ID in the given project.
 */
export declare function findVariationWithID(project: ProjectConfig, variationID: number): VariationConfig | null;
/**
 * Look up the project with the given name, regardless of ID or active state.
 */
export declare function findProjectWithName(config: SymplifyConfig, projectName: string): ProjectConfig | null;
/**
 * Allocate an active variation for the visitor in the given project.
 *
 * @returns null if the visitor ID is empty or the project or variation is not active
 */
export declare function findVariationForVisitor(project: ProjectConfig, visitorID: string): VariationConfig | null;
export declare function doesAudienceApply(project: ProjectConfig, attributes: AudienceAttributes, logger: Logger): boolean;
export declare function restoreAudience(cfg: ProjectConfig): void;
export declare function parseConfigJSON(json: string): SymplifyConfig;
